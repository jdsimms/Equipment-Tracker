/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui_app;

import java.text.SimpleDateFormat;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import java.awt.Toolkit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author John Simmonds
 */
public final class Search_Frame extends javax.swing.JFrame {
    
    SimpleDateFormat df = new SimpleDateFormat("YYYY-MM-dd HH:mm:ss");
    
    Map<String, Equipment> equipmentList;
    JComboBox comboBoxParentName;
    JComboBox comboBoxParentType;
    javax.swing.JFrame parentFrame;
    
    DefaultTableModel model;
    /**
     * Creates new form Search_Frame
     * @param equipmentList
     * @param comboBoxParentType
     * @param comboBoxParentName
     * @param parentFrame
     */
    protected Search_Frame(Map<String, Equipment> equipmentList,JComboBox comboBoxParentType ,JComboBox comboBoxParentName, javax.swing.JFrame parentFrame) {
        this.model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        initComponents();
        this.parentFrame=parentFrame;
        this.equipmentList=equipmentList;
        this.comboBoxParentName=comboBoxParentName;
        this.comboBoxParentType=comboBoxParentType;
        String[] colheading = {filter_jComboBox.getSelectedItem().toString()};
        model.setColumnIdentifiers(colheading);
        search_jTable.setModel(model); 
        searchTable("Equipment Name", "");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        filter_jComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        search_jTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        search_jTable = new javax.swing.JTable();
        jButton_close = new javax.swing.JButton();
        jButton_open = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Equipment Search");
        setIconImage(Toolkit.getDefaultToolkit().getImage("C:\\mms files\\Equipment Support Tool\\ICONS\\dump_truck_icon_182665_eJF_icon.png"));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                Search_Frame.this.windowClosed(evt);
            }
        });

        jLabel1.setText("Filter By:");

        filter_jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Equipment Name", "Equipment Type", "Equipment Profile", "Enabled", "Tech Name", "PTX IP", "PTX Serial Number", "PTX MAC", "PTX Language", "PTX Zone", "PTX Image", "PTX Frontrunner Version", "PTX Watchdog", "AVI IP", "AVI Serial Number", "AVI Mac", "AVI LTE", "AVI Watchdog", "GNSS Firmware", "GNSS Serial Number", "Enable Date", "Last Modified Date", "Server Connect Date" }));
        filter_jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter_jComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Keyword Search:");

        search_jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_jTextFieldKeyReleased(evt);
            }
        });

        search_jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {}
            },
            new String [] {

            }
        ));
        search_jTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(search_jTable);

        jButton_close.setText("Close");
        jButton_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_closeActionPerformed(evt);
            }
        });

        jButton_open.setText("Open");
        jButton_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_openActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jButton_close, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jButton_open, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(search_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(176, 176, 176))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(13, 13, 13)
                                            .addComponent(jLabel1))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addComponent(jLabel2)))
                                    .addGap(319, 319, 319)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(filter_jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filter_jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_close)
                    .addComponent(jButton_open))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void searchTable(String filter_str, String search_str){
        DefaultTableModel modelNew = (DefaultTableModel) search_jTable.getModel();
        int rows = modelNew.getRowCount();
        for (int i = rows - 1; i >= 0; i--) {
            modelNew.removeRow(i);
        }
        switch (filter_str) {
            case "Equipment Name":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*"))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey()});
        });
                break;
            case "Equipment Type":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().type != null && (entry.getValue().type.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().type});
        });
                break;
            case "Equipment Profile":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().profile != null && (entry.getValue().profile.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().profile});
        });
                break;
            case "Enabled":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().enabled != null && (entry.getValue().enabled.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().enabled});
        });
                break;
            case "Tech Name":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().tech != null && (entry.getValue().tech.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().tech});
        });
                break;
            case "PTX IP":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().ptx_ip != null && (entry.getValue().ptx_ip.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().ptx_ip});
        });
                break;
            case "PTX Serial Number":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().ptx_serial != null && (entry.getValue().ptx_serial.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().ptx_serial});
        });
                break;
            case "PTX MAC":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().ptx_mac != null && (entry.getValue().ptx_mac.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().ptx_mac});
        });
                break;
            case "PTX Language":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().ptx_lang != null && (entry.getValue().ptx_lang.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().ptx_lang});
        });
                break;
            case "PTX Zone":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().ptx_zone != null && (entry.getValue().ptx_zone.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().ptx_zone});
        });
                break;
            case "PTX Image":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().ptx_image != null && (entry.getValue().ptx_image.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().ptx_image});
        });
                break;
            case "PTX Frontrunner Version":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().ptx_front_version != null && (entry.getValue().ptx_front_version.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().ptx_front_version});
        });
                break;
            case "PTX Watchdog":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().ptx_watchdog != null && (entry.getValue().ptx_watchdog.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().ptx_watchdog});
        });
                break;
            case "AVI IP":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().avi_ip != null && (entry.getValue().avi_ip.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().avi_ip});
        });
                break;
            case "AVI Serial Number":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().avi_serial != null && (entry.getValue().avi_serial.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().avi_serial});
        });
                break;
            case "AVI Mac":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().avi_mac != null && (entry.getValue().avi_mac.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().avi_mac});
        });
                break;
            case "AVI LTE":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().avi_lte != null && (entry.getValue().avi_lte.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().avi_lte});
        });
                break;
            case "AVI Watchdog":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().avi_watchdog != null && (entry.getValue().avi_watchdog.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().avi_watchdog});
        });
                break;
            case "GNSS Firmware":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().gnss_firmware != null && (entry.getValue().gnss_firmware.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().gnss_firmware});
        });
                break;
            case "GNSS Serial Number":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().gnss_serial != null && (entry.getValue().gnss_serial.toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), entry.getValue().gnss_serial});
        });
                break;
            case "Enable Date":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().en_date != null && (entry.getValue().en_date.toString().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), df.format(entry.getValue().en_date)});
        });
                break;
            case "Last Modified Date":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().date_mod != null && (entry.getValue().date_mod.toString().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), df.format(entry.getValue().date_mod)});
        });
                break;
            case "Server Connect Date":
                this.equipmentList.entrySet().stream().filter((entry) -> (entry.getValue().conn_date != null && (entry.getValue().conn_date.toString().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*") || entry.getKey().toLowerCase().matches(".*" + search_str.toLowerCase() + ".*")))).forEachOrdered((entry) -> {
                    modelNew.addRow(new Object[]{entry.getKey(), df.format(entry.getValue().conn_date)});
        });
                break;
            case "":
                break;
            default:
                break;
        }
        search_jTable.setModel(modelNew);
    }
    
    private void filter_jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter_jComboBoxActionPerformed
        // TODO add your handling code here:
        search_jTextField.setText("");
        String filter_str = filter_jComboBox.getSelectedItem().toString();
        if (filter_jComboBox.getSelectedItem().toString().equals("Equipment Name")){
            String[] colheading = {filter_str};
            int rows = model.getRowCount();
            for (int i = rows - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            model.setColumnIdentifiers(colheading);
            search_jTable.setModel(model);
            searchTable(filter_str, "");
        } else {
            String[] colheading = {"Equipment Name", filter_str};
            int rows = model.getRowCount();
            for (int i = rows - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            model.setColumnIdentifiers(colheading);
            search_jTable.setModel(model);
            
            switch (filter_str) {
                case "Equipment Type":
                    searchTable(filter_str, "");
                    break;
                case "Equipment Profile":
                    searchTable(filter_str, "");
                    break;
                case "Enabled":
                    searchTable(filter_str, "");
                    break;
                case "Tech Name":
                    searchTable(filter_str, "");
                    break;
                case "PTX IP":
                    searchTable(filter_str, "");
                    break;
                case "PTX Serial Number":
                    searchTable(filter_str, "");
                    break;
                case "PTX MAC":
                    searchTable(filter_str, "");
                    break;
                case "PTX Language":
                    searchTable(filter_str, "");
                    break;
                case "PTX Zone":
                    searchTable(filter_str, "");
                    break;
                case "PTX Image":
                    searchTable(filter_str, "");
                    break;
                case "PTX Frontrunner Version":
                    searchTable(filter_str, "");
                    break;
                case "PTX Watchdog":
                    searchTable(filter_str, "");
                    break;
                case "AVI IP":
                    searchTable(filter_str, "");
                    break;
                case "AVI Serial Number":
                    searchTable(filter_str, "");
                    break;
                case "AVI Mac":
                    searchTable(filter_str, "");
                    break;
                case "AVI LTE":
                    searchTable(filter_str, "");
                    break;
                case "AVI Watchdog":
                    searchTable(filter_str, "");
                    break;
                case "GNSS Firmware":
                    searchTable(filter_str, "");
                    break;
                case "GNSS Serial Number":
                    searchTable(filter_str, "");
                    break;
                case "Enable Date":
                    searchTable(filter_str, "");
                    break;
                case "Last Modified Date":
                    searchTable(filter_str, "");
                    break;
                case "Server Connect Date":
                    searchTable(filter_str, "");
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_filter_jComboBoxActionPerformed

    private void search_jTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_jTextFieldKeyReleased
        // TODO add your handling code here:
        String search_str = search_jTextField.getText();
        String filter_str = filter_jComboBox.getSelectedItem().toString();
        this.searchTable(filter_str, search_str);
    }//GEN-LAST:event_search_jTextFieldKeyReleased

    private void jButton_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_openActionPerformed
        // TODO add your handling code here:
        int col = search_jTable.getSelectedColumn();
        int row = search_jTable.getSelectedRow();
        if (col != -1 && row != -1){
            String searchName = (String) model.getValueAt(row, col);
            if (equipmentList.get(searchName).isHardwareEmpty())
                searchName = searchName + " Missing HW Data";
            comboBoxParentType.setSelectedItem("All");
            comboBoxParentName.setSelectedItem(searchName);
        } 
    }//GEN-LAST:event_jButton_openActionPerformed

    private void jButton_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_closeActionPerformed
        this.parentFrame.setEnabled(true);
        this.dispose();
        this.parentFrame.toFront();
    }//GEN-LAST:event_jButton_closeActionPerformed

    private void windowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosed
        // TODO add your handling code here:
        this.parentFrame.setEnabled(true);
        this.parentFrame.toFront();
    }//GEN-LAST:event_windowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Search_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Search_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Search_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Search_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
          //  public void run() {
          //      new Search_Frame().setVisible(true);
           // }
        //});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> filter_jComboBox;
    private javax.swing.JButton jButton_close;
    private javax.swing.JButton jButton_open;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable search_jTable;
    private javax.swing.JTextField search_jTextField;
    // End of variables declaration//GEN-END:variables
}
